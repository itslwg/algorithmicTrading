# Todos for algorithmic trading project. Python todos. Mainly coded in the 
# quantativeFinance virtual environment.
#+TODO: TODO INPROGRESS BUG | DONE CANCELLED
* TODOs
** Build functions
*** DONE API call loop [3/3] :API:CALL:
   :LOGBOOK:
   CLOCK: [2019-03-29 Fri 17:10]--[2019-03-29 Fri 17:16] =>  0:06
   CLOCK: [2019-03-29 Fri 16:58]--[2019-03-29 Fri 17:06] =>  0:08
   CLOCK: [2018-08-15 Wed 08:23]--[2018-08-15 Wed 08:41] =>  0:18
   CLOCK: [2018-08-13 Mon 17:56]--[2018-08-13 Mon 18:06] =>  0:10
   CLOCK: [2018-08-12 Sun 07:49]--[2018-08-12 Sun 07:57] =>  0:08
   CLOCK: [2018-08-11 Sat 09:55]--[2018-08-11 Sat 11:22] =>  1:27
   CLOCK: [2018-08-11 Sat 08:15]--[2018-08-11 Sat 09:43] =>  1:28
   CLOCK: [2018-08-11 Sat 07:41]--[2018-08-11 Sat 07:59] =>  0:18
   CLOCK: [2018-08-10 Fri 20:32]--[2018-08-10 Fri 20:33] =>  0:01
   CLOCK: [2018-08-10 Fri 18:47]--[2018-08-10 Fri 19:02] =>  0:15
   CLOCK: [2018-08-10 Fri 17:30]--[2018-08-10 Fri 17:52] =>  0:22
    CLOCK: [2018-08-10 Fri 11:41]--[2018-08-10 Fri 12:21] =>  0:40
    CLOCK: [2018-08-09 Thu 13:39]--[2018-08-09 Thu 13:49] =>  0:10
    CLOCK: [2018-08-09 Thu 10:48]--[2018-08-09 Thu 10:49] =>  0:01
    :END:
    - [X] Get requests documentation <2018-08-09 Thu>
    - [X] Install requests <2018-08-09 Thu>
    - [X] Simple Loop with requests (Alpha vantage) <2018-08-11 Sat>
      - [X] Create ticker getter function <2018-08-10 Fri>
      - [X] Create API data getter function <2018-08-11 Sat>
	- [X] Adjust saving process to include date <2018-08-12 Sun>
      - [X] Create ticker data saver function <2018-08-13 Mon>
	- [X] Substitute relevant date data against irrelevant <2018-08-15 Wed>
	  * Moved a day to test with data day before

*** DONE Data conversion related functions :DATA:CONVERS:
    :LOGBOOK:
    CLOCK: [2018-08-15 Wed 19:36]--[2018-08-15 Wed 20:08] =>  0:32
    CLOCK: [2018-08-15 Wed 15:59]--[2018-08-15 Wed 16:21] =>  0:22
    CLOCK: [2018-08-14 Tue 09:57]--[2018-08-14 Tue 10:05] =>  0:08
    CLOCK: [2018-08-14 Tue 08:42]--[2018-08-14 Tue 08:45] =>  0:03
    CLOCK: [2018-08-14 Tue 07:49]--[2018-08-14 Tue 07:57] =>  0:08
    CLOCK: [2018-08-13 Mon 18:07]--[2018-08-13 Mon 18:25] =>  0:18
    CLOCK: [2018-08-13 Mon 17:41]--[2018-08-13 Mon 17:46] =>  0:05
    CLOCK: [2018-08-12 Sun 11:13]--[2018-08-12 Sun 11:49] =>  0:36
    CLOCK: [2018-08-12 Sun 09:19]--[2018-08-12 Sun 09:30] =>  0:11
    CLOCK: [2018-08-12 Sun 08:58]--[2018-08-12 Sun 09:12] =>  0:14
    :END:
    - [X] Get data, or read data (depending on exist)
    - [X] Coerce to pandas df <2018-08-14 Tue>
      - [X] Convert variables to relevant types
    - [X] Change file name to more informative <2018-08-16 Thu>

*** CANCELLED Save functions [2/3]                                :SAVE:FUNC:

    - [X] Create pickling function
    - [X] Create raw data saver function

*** CANCELLED Plotting function                               :PLOTTING:FUNC:
    :LOGBOOK:
    CLOCK: [2018-08-16 Thu 08:58]--[2018-08-16 Thu 09:22] =>  0:24
    CLOCK: [2018-08-15 Wed 21:03]--[2018-08-15 Wed 21:05] =>  0:02
    CLOCK: [2018-08-15 Wed 19:15]--[2018-08-15 Wed 19:35] =>  0:20
    CLOCK: [2018-08-14 Tue 21:19]--[2018-08-14 Tue 22:01] =>  0:42
    :END:
    - [X] Get matplotlib documentation
    - [-] Create plotter function
      - [X] Fix bug of one dot plot
      - [ ] Adecuate error handling for params
** Build classes
*** Asset class
**** DONE Beginner init [2/2]

     - [X] Ticker attr
     - [X] Data attr
       - [X] OHLC
       - [X] OHLC adjusted
	 
**** DONE Simple integration [2/2]
     :LOGBOOK:
     CLOCK: [2018-10-26 Fri 07:26]--[2018-10-26 Fri 07:41] =>  0:15
     CLOCK: [2018-10-26 Fri 07:25]--[2018-10-26 Fri 07:25] =>  0:00
     CLOCK: [2018-09-13 Thu 07:10]--[2018-09-13 Thu 07:29] =>  0:19
     CLOCK: [2018-09-11 Tue 07:18]--[2018-09-11 Tue 08:01] =>  0:43
     CLOCK: [2018-09-11 Tue 07:08]--[2018-09-11 Tue 07:18] =>  0:10
     CLOCK: [2018-09-04 Tue 16:02]--[2018-09-04 Tue 16:06] =>  0:04
     CLOCK: [2018-09-04 Tue 15:25]--[2018-09-04 Tue 15:56] =>  0:31
     CLOCK: [2018-09-04 Tue 07:59]--[2018-09-04 Tue 10:47] =>  2:48
     CLOCK: [2018-08-31 Fri 07:27]--[2018-08-31 Fri 07:58] =>  0:31
     :END:
     - Planning:
       - <2018-08-31 Fri 07:15-08:00>
       - <2018-09-04 Tue 07:15-08:00>
       - <2018-09-04 Tue 15:25-16:00>
       - <2018-09-05 Wed 07:15-08:00>
       - <2018-09-11 Tue 07:00-08:00>
       - <2018-09-13 Thu 07:00-07:45>
       - <2018-09-19 Wed 07:00-08:00>

     - [X] Integrate in reading data
       - [X] Checkout reading, maybe dictionary with Stock instance
     - [X] Integrate in writing data
       - [X] Pickle function

**** DONE Moving average method
     :LOGBOOK:
     CLOCK: [2018-10-26 Fri 07:41]--[2018-10-26 Fri 08:02] =>  0:21
     CLOCK: [2018-09-15 Sat 07:07]--[2018-09-15 Sat 07:37] =>  0:30
     CLOCK: [2018-09-14 Fri 07:03]--[2018-09-14 Fri 07:47] =>  0:44
     :END:
     - <2018-09-14 Fri 07:05-07:45>

     - BUG [2018-10-26 Fri]
       Moving average method not working properly, cant change
       window. Defaults to 50, according to parameter set, 
       yet cant specify when called.
     - [X] Adjust for zipline backtesting

**** TODO MACD method
     :LOGBOOK:
     CLOCK: [2018-11-02 Fri 06:45]--[2018-11-02 Fri 06:45] =>  0:00
     :END:
     <2018-11-02 Fri 06:30-08:00>

**** DONE Plotting method
     CLOSED: [2019-04-12 Fri 08:57]
     :LOGBOOK:
     CLOCK: [2018-10-27 Sat 08:01]--[2018-10-27 Sat 08:01] =>  0:00
     CLOCK: [2018-10-27 Sat 07:26]--[2018-10-27 Sat 07:46] =>  0:20
     CLOCK: [2018-10-26 Fri 09:30]--[2018-10-26 Fri 09:54] =>  0:24
     CLOCK: [2018-10-26 Fri 08:56]--[2018-10-26 Fri 09:00] =>  0:04
     :END:

     - [X] Simple plot with ohlc
     - [X] Plot with indicators

**** DONE Rename to Asset
     SCHEDULED: <2019-04-12 Fri>

**** CANCELLED Trendlines method
     :LOGBOOK:
     CLOCK: [2018-11-01 Thu 07:35]--[2018-11-01 Thu 07:56] =>  0:21
     CLOCK: [2018-11-01 Thu 06:40]--[2018-11-01 Thu 07:34] =>  0:54
     CLOCK: [2018-10-31 Wed 07:18]--[2018-10-31 Wed 08:10] =>  0:52
     CLOCK: [2018-10-31 Wed 06:44]--[2018-10-31 Wed 07:07] =>  0:23
     CLOCK: [2018-10-30 Tue 07:30]--[2018-10-30 Tue 07:48] =>  0:18
     CLOCK: [2018-10-29 Mon 07:16]--[2018-10-29 Mon 08:00] =>  0:44
     CLOCK: [2018-10-29 Mon 06:48]--[2018-10-29 Mon 07:08] =>  0:20
     CLOCK: [2018-10-28 Sun 10:45]--[2018-10-28 Sun 10:47] =>  0:02
     CLOCK: [2018-10-28 Sun 08:49]--[2018-10-28 Sun 08:58] =>  0:09
     CLOCK: [2018-10-28 Sun 08:09]--[2018-10-28 Sun 08:44] =>  0:35
     CLOCK: [2018-10-28 Sun 08:06]--[2018-10-28 Sun 08:07] =>  0:01
     CLOCK: [2018-10-28 Sun 07:09]--[2018-10-28 Sun 07:42] =>  0:33
     CLOCK: [2018-10-27 Sat 08:03]--[2018-10-27 Sat 08:46] =>  0:43
     CLOCK: [2018-10-26 Fri 08:29]--[2018-10-26 Fri 08:53] =>  0:24
     CLOCK: [2018-10-26 Fri 08:25]--[2018-10-26 Fri 08:29] =>  0:04
     CLOCK: [2018-10-26 Fri 08:02]--[2018-10-26 Fri 08:13] =>  0:11
     :END:
     - <2018-10-29 Mon 06:45-08:00>
     - <2018-10-30 Tue 06:45-08:00>
     - [X] Simple drawing from highs in time frame
     - [ ] Trend canal
       - [ ] Upper
       - [ ] Lower
     - [X] As own method, put inside df to provide easy
       access

     - BUG [2018-10-28 Sun]
       Not recognising trend lines method
     - TIPs [2018-10-28 Sun]
       Checkout scipy max-minima function
       Work with find_peaks and the prominence parameter
       to filter out noise.
     - CANCELLED [2018-11-01 Thu]
       Too arbitrary, as well as hard-implemented

**** TODO Error handling inside class
**** DONE Trademark Bollinger bands
     :LOGBOOK:
     CLOCK: [2019-04-15 Mon 22:05]--[2019-04-15 Mon 22:08] =>  0:03
     CLOCK: [2019-04-15 Mon 21:27]--[2019-04-15 Mon 21:28] =>  0:01
     CLOCK: [2019-03-30 Sat 06:40]--[2019-03-30 Sat 06:45] =>  0:05
     CLOCK: [2019-03-29 Fri 21:26]--[2019-03-29 Fri 21:26] =>  0:00
     CLOCK: [2019-03-29 Fri 18:58]--[2019-03-29 Fri 19:29] =>  0:31
     CLOCK: [2018-11-03 Sat 07:15]--[2018-11-03 Sat 08:00] =>  0:45
     CLOCK: [2018-11-03 Sat 06:42]--[2018-11-03 Sat 07:15] =>  0:33
     :END:
     <2018-11-04 Sun 06:30-08:00>

     - [X] Easier plotting with plotter method (looping over dataframe)
     - [X] Adjust for zipline backtesting

**** CANCELLED Train-Test method
     :LOGBOOK:
     CLOCK: [2019-05-13 Mon 07:40]--[2019-05-13 Mon 08:05] =>  0:25
     CLOCK: [2019-05-13 Mon 07:05]--[2019-05-13 Mon 07:30] =>  0:25
     CLOCK: [2019-05-12 Sun 08:15]--[2019-05-12 Sun 08:40] =>  0:25
     CLOCK: [2019-05-12 Sun 07:11]--[2019-05-12 Sun 07:36] =>  0:25
     CLOCK: [2019-05-12 Sun 06:41]--[2019-05-12 Sun 07:06] =>  0:25
     CLOCK: [2019-04-17 Wed 08:03]--[2019-04-17 Wed 08:50] =>  0:47
     CLOCK: [2019-04-17 Wed 07:17]--[2019-04-17 Wed 07:54] =>  0:37
     :END:
    
     - [X] Implement with 10-day lookback
       - [X] Test with sample df
       - [X] Implement with zipline
     - [X] Adjust for n-day lookback
     - [X] Adjust for different models with classifier parameter
      
     CANCELLED 
    
     Better to create the feature set in the algorithm itself.
     Maybe training method?

**** DONE Fit and predict with classifier method
**** DONE Feature setup method

     - [X] For arbitrary number of features
     - [X] Checking for the last row with nas, remove until that row
     - [X] Adding n day price as features with reallocating rows in columns
     - [X] Logical for price as feature

**** TODO Model setup method
    
     - [ ] Keras implementation
       - [ ] Model.add(layers)
**** TODO Inherit from Zipline
*** ML class?
*** Portfolio management class
*** Simulation Class
   :LOGBOOK:
   CLOCK: [2019-04-15 Mon 22:18]--[2019-04-15 Mon 23:01] =>  0:43
   CLOCK: [2019-04-15 Mon 16:46]--[2019-04-15 Mon 16:47] =>  0:01
   CLOCK: [2019-04-15 Mon 16:16]--[2019-04-15 Mon 16:44] =>  0:28
   :END:
**** DONE Plotting method

     * [X] Transactions
     * [X] Cols

** Pipeline/CustomFactor
*** CANCELLED Monthly volatility
*** CANCELLED MACD
*** CANCELLED ExponentialMovingAverage
*** DONE SimpleḾovingAverage
*** DONE BollingerBands

    - [X] Difference
    - [ ] Bands

*** CANCELLED RSI
*** DONE Price from n days back

    * [ ] As multiple customfactors in make_pipeline; slower
    * [ ] As a single customfactor with n days back argument, faster, vectorized

** Portfolio management
*** TODO Volatility standardisation
*** TODO ML-portfolio management
*** TODO Uncoorelated assets
*** TODO How many assets?
*** TODO PyPortfolioOpt
*** CANCELLED Quantopian optimize API

    Only available on the web version. Lame.

*** INPROGRESS PyFolio
**** Converting zipline data to pyfolio  
     https://nbviewer.jupyter.org/format/slides/github/quantopian/pyfolio/blob/master/pyfolio/examples/pyfolio_talk_slides.ipynb#/9
**** DONE Simple Returns Sheet
** Simulations
   :LOGBOOK:
   CLOCK: [2019-04-15 Mon 21:35]--[2019-04-15 Mon 22:05] =>  0:30
   CLOCK: [2019-04-15 Mon 21:29]--[2019-04-15 Mon 21:34] =>  0:05
   CLOCK: [2019-04-10 Wed 22:36]--[2019-04-10 Wed 22:38] =>  0:02
   CLOCK: [2019-04-06 Sat 21:15]--[2019-04-06 Sat 21:21] =>  0:06
   CLOCK: [2019-04-06 Sat 21:01]--[2019-04-06 Sat 21:06] =>  0:05
   CLOCK: [2019-04-06 Sat 20:38]--[2019-04-06 Sat 20:46] =>  0:08
   CLOCK: [2019-04-05 Fri 19:19]--[2019-04-05 Fri 19:31] =>  0:12
   CLOCK: [2019-04-04 Thu 19:53]--[2019-04-04 Thu 20:12] =>  0:19
   CLOCK: [2019-04-03 Wed 11:30]--[2019-04-03 Wed 11:40] =>  0:10
   CLOCK: [2019-04-01 Mon 07:50]--[2019-04-01 Mon 08:24] =>  0:34
   CLOCK: [2019-03-30 Sat 07:00]--[2019-03-30 Sat 07:24] =>  0:24
   CLOCK: [2018-11-02 Fri 07:41]--[2018-11-02 Fri 08:06] =>  0:25
   CLOCK: [2018-11-02 Fri 06:45]--[2018-11-02 Fri 07:01] =>  0:16
   :END:
   - <2018-11-03 Sat 06:30-08:00>
*** Zipline
**** Strategies

   - [X] Simple "buy-hold strategy" of one stock
   - [-] SMA crossover strategy.
     Long on ma20 > ma50 and short on ma20 < ma50
     - [X] Single asset strategy
     - [ ] Multiple asset strategy
   - [X] Bollinger band strategy

**** DONE Module importing bug
     CLOSED: [2019-04-11 Thu 09:18]

     - Can't import own modules?
     - Fixed with ipython

** Asset data pipelines
*** TODO Derivatives
*** TODO Bonds
*** TODO Forwards
*** TODO FX
*** TODO SCALA?

** Machine Learning approach
   :LOGBOOK:
   CLOCK: [2019-04-19 Fri 22:31]--[2019-04-19 Fri 22:31] =>  0:00
   :END:
*** INPROGRESS sklearn
    :LOGBOOK:
    CLOCK: [2019-04-19 Fri 22:50]--[2019-04-19 Fri 23:10] =>  0:20
    CLOCK: [2019-04-19 Fri 22:31]--[2019-04-19 Fri 22:44] =>  0:13
    CLOCK: [2019-04-19 Fri 21:43]--[2019-04-19 Fri 22:29] =>  0:46
    CLOCK: [2019-04-17 Wed 07:16]--[2019-04-17 Wed 07:17] =>  0:01
    :END:
**** SVC

     * [X] One day stock price for next day prediction 
       Not working, won't give classification
     * [X] 10-day stock price for next day prediction

**** Multiclass-classification
*** Cross-validation
**** K-fold
**** Simple split
     :LOGBOOK:
     CLOCK: [2019-04-17 Wed 07:16]--[2019-04-17 Wed 07:16] =>  0:00
     CLOCK: [2019-04-16 Tue 07:36]--[2019-04-16 Tue 07:52] =>  0:16
     CLOCK: [2019-04-16 Tue 06:47]--[2019-04-16 Tue 07:36] =>  0:49
     :END:
     
     - [ ] Schedule function to split, train and evaluate
       
**** Hyndman time series validation
*** INPROGRESS Additional features than stock price
**** Stats

     - [ ] Volatility

**** Technical Indicators

     - [ ] RSI
     - [X] MA
     - [X] Bollinger
     - [X] MACD

**** Fundamentals
     
     - [ ] Scraping
     - [ ] Zipline fundamentals API

*** Model evaluation

    * [ ] AUROCC
    * [ ] Recall/precision
    * [ ] Portfolio value
    * [ ] Sharpe

*** PyTorch
*** INPROGRESS TensorFlow
    :LOGBOOK:
    CLOCK: [2019-04-16 Tue 06:46]--[2019-04-16 Tue 06:47] =>  0:01
    CLOCK: [2019-04-15 Mon 21:24]--[2019-04-15 Mon 21:27] =>  0:03
    CLOCK: [2019-04-15 Mon 21:17]--[2019-04-15 Mon 21:23] =>  0:06
    :END:
**** Keras 
*** TODO H20

    <2018-11-05 Mon 06:30-08:00>

*** DONE Create features with Pipeline

    - [X] How to handle features?
      - [X] Bind row-wise, so that the rows are the assets for a specific date
      - [X] Use concat, not vstack, as the factors are not in original order
	and need to access latest price
    - [X] How to handle the target?
      - [X] Use the built-in Returns factor
      - [X] Create binary outcome from the Returns factor
    - [X] Use pipeline to store data in a feature dataset
      - [X] As an pandas dataframe in context
    - [X] BUG Not running model fit
      Missing values for a lot of assets. Handled with removing data 
      for now; should be imputed in some way.
    - [X] Get multiple days worth of data to train the classifier
      - [X] Using a context variable, indicate if a certain number of 
	days has gone by.
    - [X] Predict on new pipelined data
    - [ ] Function to split the data
    - [X] Schedule to train a classifier on the feature dataset
      once a month

** Config as module
*** DONE Config documentation structure <2018-08-09 Thu> :CONFIG:ASDOC:
*** DONE Config .py files structure [100%]  <2018-08-10 Fri> :CONFIG:PY:

    - [X] Intial test .py
    - [X] Begin file structure

** Setup Git
*** TODO Git workflow
** Fix with google style guide

   module_name,
   package_name, 
   ClassName, 
   method_name, 
   ExceptionName,
   function_name,
   GLOBAL_CONSTANT_NAME,
   global_var_name,
   instance_var_name, 
   function_parameter_name,
   local_var_name
** DONE STOP BEING SUCH A NOOB                          :noobstop:emacs4ever:
* ISSUEs
** ISSUE
* Resources
** DONE Seven resons ML funds Quantopian 
 SCHEDULED: <2019-06-17 Mon>
